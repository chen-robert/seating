<html>
<head>
  <title><%= title %></title>
  <script src="//ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
  <script src="//cdnjs.cloudflare.com/ajax/libs/seedrandom/3.0.5/seedrandom.min.js"></script>
  <link rel="stylesheet" href="/styles/main.css">
  <link href="https://fonts.googleapis.com/css?family=Roboto&display=swap" rel="stylesheet">
</head>
<body>
  <div class="main">
    <section class="sidebar" id="sidebar">
    </section>
    <table>
      <tbody id="main">
      
      </tbody>
    </table>
  </div>
</body>
<script>
Math.seedrandom("<%= seed %>");

const grid = <%- JSON.stringify(layout) %>;
for(var i = 0; i <= grid.length; i++) {
  let row = "<tr>";
  for(var j = 0; j <= grid[0].length; j++) {
    if(i == 0 || j == 0) {
      let num = "";
      if(i != 0) num = String.fromCharCode("a".charCodeAt(0) + i - 1);
      if(j != 0) num = j;
      row += `<td class="grid--small">${num}</td>`;
    } else {
      row += `<td class="grid--big" data-coords="${(i - 1) + "," + (j - 1)}"><p></p></td>`;
    }

  }
  row += "</tr>";
  
  main.insertAdjacentHTML("beforeend", row);
}

const shuffle = a => {
  for (let i = a.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [a[i], a[j]] = [a[j], a[i]];
  }
  return a;
}

const names = <%- JSON.stringify(names) %>;
const prefMap = <%- JSON.stringify(prefMap) %>;
const size = grid.length;


for(let i = 0; i < grid.length; i++){
  for(let j = 0; j < grid[i].length; j++){
    if(grid[i][j]) $(`td[data-coords="${i + "," + j}"]`).toggleClass("clicked");
  }  
}


const cleanName = name => {
  const parts = name.split(",").map(a => a.trim().charAt(0).toUpperCase());
  
  return parts[1] + parts[0]; 
}

const displayPts = list => {
  list.sort((a, b) => a.name.localeCompare(b.name));

  $("#sidebar").html("");
  for(const {name, x, y} of list) {
    $("#sidebar").append(`
      <div class="sidebar__row">
        <div class="sidebar__title">${name}</div>
        <div class="sidebar__pos">${String.fromCharCode("a".charCodeAt(0) + x)} - ${y + 1}</div>
      </div>
    `);

    $(`td[data-coords="${x},${y}"]`).text(cleanName(name));
    $(`td[data-coords="${x},${y}"]`).prop("title", name);
  }
}

const permute = (arr, lim, fn, idx=0, base=[]) => {
  if(base.length === lim) return fn(base.concat());

  for(let i = idx; i < arr.length; i++) {
    base.push(i);
    permute(arr, lim, fn, i + 1, base);
    base.pop();
  }
}

const score = (idx, names, debug) => {
  const group = idx.map(i => names[i]);
  return group
    .map(name => {
      let curr = prefMap[name]
        .map(name => group.includes(name) ? 1: 0)
        .reduce((a, b) => a + b, 0);

      if(prefMap[name].length === 0) curr = 1;
      else curr /= prefMap[name].length;

      if(curr === 0 && debug) console.log(name);

      return curr === 0? -100: curr;
    })
    .reduce((a, b) => a + b, 0);
}

const relabel = () => {
  let curr = names.slice();
  shuffle(curr);

  let tot = 0;

  const valid = [0, 6, 11, 16, 21, 26, 31];

  const permMap = {};
  for(const i of valid) {
    permMap[i] = {};

    let tmp = [];
    permute(new Array(i), 5, idx => {
      tmp.push(idx);
    });
    shuffle(tmp)
    permMap[i][5] = tmp;

    tmp = [];
    permute(new Array(i), 6, idx => {
      tmp.push(idx);
    });
    shuffle(tmp)
    permMap[i][6] = tmp;
  }
  console.log(permMap)


  const N = names.length;
  const memo = {};
  const mapBack = {};
  const hash = mask => mask.join(",");
  const dp = mask => {
    const maskH = hash(mask);
    if(memo[maskH]) return memo[maskH];

    const opts = [];
    for(let i = 0; i < N; i++) {
      if(mask[i]) opts.push(i);
    }
    if(opts.length === 0) return 0;
    
    let cnt = 0;
    let best = -100000;
    const applyPerm = idx => {
      const delta = score(idx.map(i => opts[i]), curr);

      if(opts.length > 16 && delta < 4) return;
      if(delta < 0) return;
      
      if(cnt++ > 10) return;

      for(const i of idx) mask[opts[i]] = false;

      const nxt = dp(mask) + delta;
      if(best < nxt) {
        best = nxt;
        mapBack[maskH] = hash(mask);

        if(opts.length == 31) console.log(best);
      }
      
      for(const i of idx) mask[opts[i]] = true;
    }

    let todo = [];
    if(valid.includes(opts.length - 5)) {
      todo = todo.concat(permMap[opts.length][5]);
    }
    if(valid.includes(opts.length - 6)) {
      todo = todo.concat(permMap[opts.length][6]);
    }

    for(let i = 0; i < todo.length; i++) {
      applyPerm(todo[i]);
    }

    memo[maskH] = best;
    return best;
  }
  
  const mask = names.map(_ => true);
  dp(mask);

  const maps = [];
  let currH = hash(mask);
  for(let i = 0; i < 6; i++) {
    maps.push(currH.split(",").map(a => a === "true"));
    currH = mapBack[currH];
  }
  maps.push(currH.split(",").map(a => a === "true"));

  const tables = [];
  for(let i = 0; i < 6; i++) {
    const currSet = [];
    for(let j = 0; j < maps[i].length; j++) {
      if(maps[i][j] && !maps[i+1][j]) currSet.push(j);
    }
    console.log(score(currSet, curr));

    const seating = currSet.map(i => curr[i]); 
    const seatScore = seating => {
      let ret = 0;

      const testPair = (a, b) => {
        a = seating[a];
        b = seating[b];
        if(prefMap[a].includes(b) && prefMap[b].includes(a)) ret++;
      }

      testPair(0, 1);
      testPair(2, 3);

      if(seating.length === 6) testPair(5, 6);

      return ret;
    }
    
    let cnt = 0;
    let bestSeating = seating.concat();
    while(cnt++ < 500) {
      shuffle(seating);
    
      if(seatScore(seating) > seatScore(bestSeating)) bestSeating = seating.concat();
      if(seatScore(bestSeating) === 3) break;
    }
    tables.push(bestSeating);
  }

  console.log(tables.concat());

  const genPts = (x, y, vert=true) => {
    const ret = [];
    if(vert) {
      ret.push({x: x, y: y}); 
      ret.push({x: x, y: y + 1}); 
      ret.push({x: x + 1, y: y}); 
      ret.push({x: x + 1, y: y + 1}); 
      ret.push({x: x, y: y + 2}); 
      ret.push({x: x + 1, y: y + 2}); 
    } else {
      ret.push({x: x, y: y}); 
      ret.push({x: x + 1, y: y}); 
      ret.push({x: x, y: y + 1}); 
      ret.push({x: x + 1, y: y + 1}); 
      ret.push({x: x + 2, y: y}); 
      ret.push({x: x + 2, y: y + 1}); 
    }
    return ret;
  }

  const list = [];
  shuffle(tables);
  const base = [{x: 0, y: 0}, {x: 4, y: 0}, {x: 8, y: 1}, {x: 0, y: 5}, {x: 4, y: 5}, {x: 8, y: 5}];
  for(const {x, y} of base) {
    const currTable = tables.pop();
    const pts = genPts(x, y, x !== 8);

    for(let i = 0; i < currTable.length; i++) {
      list.push({name: currTable[i], x: pts[i].x, y: pts[i].y});
    }
  }
  displayPts(list)
}

relabel();



</script>
</body>
</html>
