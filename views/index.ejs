<html>
<head>
  <title><%= title %></title>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
  <link rel="stylesheet" href="/styles/main.css">
</head>
<div>
  <table>
    <tbody id="main">
    
    </tbody>
  </table>
</div>
<script>
for(var i = 0; i < 50; i++) {
  let row = "<tr>";
  for(var j = 0; j < 50; j++) row += `<td data-coords="${i + "," + j}"><p></p></td>`;
  row += "</tr>";
  
  main.insertAdjacentHTML("beforeend", row);
}

const grid = [];
const size = 15;
for(var i = 0; i < size; i++) grid.push(new Array(size).fill(false));

for(var i = 0; i < 3; i++){
  for(var j = 0; j < 3; j++){
    for(var k = 0; k < 2; k++){
      for(var l = 0; l < 2; l++){
        let nxtj = 4 * i + k + 1;
        let nxti = j + 5 * l;
        
        $(`td[data-coords="${nxti + "," + nxtj}"]`).toggleClass("clicked");
        grid[nxti][nxtj] = true;
      }
    }
  }
}


const names = <%- JSON.stringify(names) %>;

function shuffle(a) {
  for (let i = a.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [a[i], a[j]] = [a[j], a[i]];
  }
  return a;
}

const cleanName = name => {
  const parts = name.split(",").map(a => a.trim().charAt(0).toUpperCase());
  
  return parts[1] + parts[0]; 
}

const relabel = () => {
  const curr = names.slice();
  shuffle(curr);
 
  const order = [];
  for(var i = 0; i < size; i++) {
    for(var j = 0; j < size; j++) {  
      if(grid[i][j]) order.push({x: i, y: j});
      $(`td[data-coords="${i + "," + j}"] p`).text("");
    }
  }
  shuffle(order)

  order.sort((a, b) => Math.abs(b.x - 3.5) - Math.abs(a.x - 3.5));

  for(const {x, y} of order) {
    if(curr.length === 0) continue;
    
    $(`td[data-coords="${x + "," + y}"] p`).text(cleanName(curr.pop()));
  }
}


$(() => {
  $("td").click(function() {
    const [x, y] = $(this).data("coords").split(",").map(a => +a);
    grid[x][y] = !grid[x][y];
    
    $(this).toggleClass("clicked");
    relabel();  
  });
});

relabel();



</script>
<script>


const sizeLim = 6;
const sizes = [6, 6, 6, 6, 6, 6];

const lp = [1];
for(const num of sizes) lp.push(lp[lp.length - 1] * num);
lp.pop();

const assert = condition => {
  if(!condition) throw "Assertion failed";
}

const hash = state => {
  assert(state.length === lp.length);

  let ret = 0;
  for(var i = 0; i < state.length; i++) {
    ret += state[i] * lp[i];
  }
  return ret;
}

const constraints = [];
for(let i = 0; i < names.length; i++){
  constraints.push(new Array(names.length).fill(0));
}

const dp = [];
const base = new Array(sizes.length).fill(0);
dp[hash(base)] = 0;

const recurse = (sum, fn, curr=[]) => {
  if(curr.length === sizes.length) return fn(curr);
  
  for(let i = (curr.length === sizes.length - 1 ? sum: 0); i <= sum && i < sizeLim; i++) {
    curr.push(i);
    recurse(sum - i, fn, curr);
    curr.pop();
  }
}

const get = state => {
  const key = hash(state);
  if(dp[key] !== undefined) return dp[key];
  return -Infinity;
}

const set = (state, val) => {
  dp[state] = Math.max(get(state), val);
}

for(let i = 1; i <= names.length; i++) {
  recurse(i, state => {
    for(let j = 0; j < state.length; j++){
      if(state[j] != 0) {
        const nxt = state.slice();
        nxt[j]--;
        
        set(state, get(nxt));
      }
    }
  });
}
</script>
