<html>
<head>
  <title><%= title %></title>
  <script src="//ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
  <script src="//cdnjs.cloudflare.com/ajax/libs/seedrandom/3.0.5/seedrandom.min.js"></script>
  <link rel="stylesheet" href="/styles/main.css">
  <link rel="stylesheet" href="/styles/navbar.css">
  <link href="https://fonts.googleapis.com/css?family=Roboto&display=swap" rel="stylesheet">

  <link href="../../ext/loading-bar.css" rel="stylesheet">
  <script src="../../ext/loading-bar.js"></script>
</head>
<body>
  <div class="navbar">
    <div class="navbar--link">
      <a href="https://github.com/chen-robert/seating">Code</a>
    </div>
    <div class="navbar--link">
      <a href="https://blog.robertchen.cc/2019/10/02/seating-charts/">Methodology</a>
    </div>
  </div>
  <div class="main">
    <button class="btn btn--small" onclick="window.location = window.location.href + '/pref'">Prefs</button>
    <button class="btn" onclick="btnClick()">Build</button>
    <button class="btn btn--small" onclick="reset()">Reseed</button>
    <br>
    <div class="slidecontainer">
      <label for="workFactor">Work Factor</label><br>
      <div class="wrapper">
        Faster <input type="range" min="1" max="25" value="4" class="slider" id="workFactor"> Better
      </div>
    </div>
    <div id="loading" class="ldBar" data-preset="circle" style="margin: 0 auto;"></div>
    <div id="results"></div>
  </div>
</body>
<script src="../../scripts/util.js"></script>
<script>
const names = <%- JSON.stringify(names) %>;
const tables = <%- JSON.stringify(tables) %>;
const prefMap = <%- JSON.stringify(prefMap) %>;

const score = (idx, names, debug) => {
  return indivScores(idx, names).reduce((a, b) => a + b, 0);
}

const indivScores = (idx, names, debug) => {
  const group = idx.map(i => names[i]);
  if(debug) console.log(group)
  return group
    .map(name => {
      let curr = prefMap[name]
        .map(name => group.includes(name) ? 1: 0)
        .reduce((a, b) => a + b, 0);

      if(prefMap[name].length === 0) curr = 1;
      else curr /= prefMap[name].length;

      return curr === 0? -100: curr;
    })
}

const bar = new ldBar("#loading");
const btnClick = () => {
  bar.set(10);

  setTimeout(relabel, 1000);
}

const reset = () => {
  window.location = window.location.href + "/reset"
}

const relabel = () => {
  Math.seedrandom("<%= seed %>");

  let curr = names.slice();
  shuffle(curr);

  let tot = 0;

  const validDrops = unique(tables);
  const valid = [0];

  tables.sort((a, b) => b - a).forEach(i => valid.push(valid[valid.length - 1] + i));

  const permMap = {};
  for(const i of valid) {
    permMap[i] = {};

    for(const len of validDrops) {
      let tmp = [];
      permute(new Array(i), len, idx => {
        tmp.push(idx);
      });
      shuffle(tmp)
      permMap[i][len] = tmp;
    }
  }

  const N = names.length;
  const memo = {};
  const mapBack = {};
  const hash = mask => mask.join(",");
  const dp = (mask, first=false) => {
    const maskH = hash(mask);
    if(memo[maskH]) return memo[maskH];

    const opts = [];
    for(let i = 0; i < N; i++) {
      if(mask[i]) opts.push(i);
    }
    if(opts.length === 0) return 0;
    
    let cnt = 0;
    let best = -100000;
    const applyPerm = idx => {
      const delta = score(idx.map(i => opts[i]), curr);
      
      if(cnt++ > +$("#workFactor").val()) return;

      for(const i of idx) mask[opts[i]] = false;

      const nxt = dp(mask) + delta;
      if(best < nxt) {
        best = nxt;
        mapBack[maskH] = hash(mask);
      }
      
      for(const i of idx) mask[opts[i]] = true;
    }

    let todo = [];
    for(const len of validDrops) {
      if(valid.includes(opts.length - len)) {
        todo = todo.concat(permMap[opts.length][len]);
      }
    }

    for(let i = 0; i < todo.length; i++) {
      applyPerm(todo[i]);
    }

    memo[maskH] = best;
    return best;
  }
  
  const mask = names.map(_ => true);
  dp(mask, true);

  const maps = [];
  let currH = hash(mask);
  for(let i = 0; i < tables.length; i++) {
    maps.push(currH.split(",").map(a => a === "true"));
    currH = mapBack[currH];
  }
  maps.push(currH.split(",").map(a => a === "true"));

  const finalizedTables = [];
  for(let i = 0; i < tables.length; i++) {
    const currSet = [];
    for(let j = 0; j < maps[i].length; j++) {
      if(maps[i][j] && !maps[i+1][j]) currSet.push(j);
    }
    console.log(indivScores(currSet, curr, true));

    const seating = currSet.map(i => curr[i]); 
    finalizedTables.push({
      table: seating,
      weights: indivScores(currSet, curr)
    });
  }

  $("#results").html("");
  finalizedTables.forEach(({table, weights}) => {
    $("#results").append(`
      <div class="wrapper">
        ${table.map((name, i) => {
          const color = blend("36c95e", "f0573c", weights[i]);
          return `<div class="wrapper--elem" style="background-color: #${color}">${name}</div>`
        }).join("\n")}  
      </div>
    `)
  });

  
  bar.set(100);
}
</script>
</body>
</html>
